
# # import requests
# # from bs4 import BeautifulSoup
# #
# # url = 'http://localhost:8080/login'
# # reqs = requests.get(url)
# # soup = BeautifulSoup(reqs.text)
# #
# # urls = []
# # for link in soup.find_all():
# #     if not link.get('class') == None:
# #         print(link.get('class'))
# import urwid
#
# class MenuButton(urwid.Button):
#     def __init__(self, caption, callback):
#         super(MenuButton, self).__init__("")
#         urwid.connect_signal(self, 'click', callback)
#         self._w = urwid.AttrMap(urwid.SelectableIcon(
#             [u'  \N{BULLET} ', caption], 2), None, 'selected')
#
# class SubMenu(urwid.WidgetWrap):
#     def __init__(self, caption, choices):
#         super(SubMenu, self).__init__(MenuButton(
#             [caption, u"\N{HORIZONTAL ELLIPSIS}"], self.open_menu))
#         line = urwid.Divider(u'\N{LOWER ONE QUARTER BLOCK}')
#         listbox = urwid.ListBox(urwid.SimpleFocusListWalker([
#             urwid.AttrMap(urwid.Text([u"\n  ", caption]), 'heading'),
#             urwid.AttrMap(line, 'line'),
#             urwid.Divider()] + choices + [urwid.Divider()]))
#         self.menu = urwid.AttrMap(listbox, 'options')
#
#     def open_menu(self, button):
#         top.open_box(self.menu)
#
# class Choice(urwid.WidgetWrap):
#     def __init__(self, caption):
#         super(Choice, self).__init__(
#             MenuButton(caption, self.item_chosen))
#         self.caption = caption
#
#     def item_chosen(self, button):
#         response = urwid.Text([u'  You chose ', self.caption, u'\n'])
#         done = MenuButton(u'Ok', exit_program)
#         response_box = urwid.Filler(urwid.Pile([response, done]))
#         top.open_box(urwid.AttrMap(response_box, 'options'))
#
# def exit_program(key):
#     raise urwid.ExitMainLoop()
#
# menu_top = SubMenu(u'Main Menu', [
#     SubMenu(u'Applications', [
#         SubMenu(u'Accessories', [
#             Choice(u'Text Editor'),
#             Choice(u'Terminal'),
#         ]),
#     ]),
#     SubMenu(u'System', [
#         SubMenu(u'Preferences', [
#             Choice(u'Appearance'),
#         ]),
#         Choice(u'Lock Screen'),
#     ]),
# ])
#
# palette = [
#     (None,  'light gray', 'black'),
#     ('heading', 'black', 'light gray'),
#     ('line', 'black', 'light gray'),
#     ('options', 'dark gray', 'black'),
#     ('focus heading', 'white', 'dark red'),
#     ('focus line', 'black', 'dark red'),
#     ('focus options', 'black', 'light gray'),
#     ('selected', 'white', 'dark blue')]
# focus_map = {
#     'heading': 'focus heading',
#     'options': 'focus options',
#     'line': 'focus line'}
#
# class HorizontalBoxes(urwid.Columns):
#     def __init__(self):
#         super(HorizontalBoxes, self).__init__([], dividechars=1)
#
#     def open_box(self, box):
#         if self.contents:
#             del self.contents[self.focus_position + 1:]
#         self.contents.append((urwid.AttrMap(box, 'options', focus_map),
#             self.options('given', 24)))
#         self.focus_position = len(self.contents) - 1
#
# top = HorizontalBoxes()
# top.open_box(menu_top.menu)
# urwid.MainLoop(urwid.Filler(top, 'middle', 10), palette).run()
# import sys
#
# def tabs(amount_of_tabs):
#     return amount_of_tabs * " "
#
# string_for_feature = ""
# print("--NAME FOR FILE--")
# name_of_file = input("Pick a name for your file: ")
#
# print("\n--FEATURE DESCRIPTION--")
# feature_description = input("Pick a feature description for this: ")
# string_for_feature = string_for_feature + "Feature: " + feature_description + "\n"
#
# print("\n--SCENARIO DESCRIPTION--")
# scenario_description = input("Pick a scenario description for this: ")
# string_for_feature = string_for_feature + "Scenario: " + f"{scenario_description}\n"
#
# print("\n--OPTIONS FOR GIVEN--")
# while True:
#     option = input("Choose one from options for GIVEN action:\n"
#                    "1. Given logged as admin\n"
#                    "2. Given visited page <page_name>\n"
#                    "P: Do not use Given\n")
#     if int(option) == 1:
#         string_for_feature = string_for_feature + f"{tabs(2)}Given logged as admin\n"
#         print("Option first")
#         break
#     elif int(option) == 2:
#         page_link = input("Page link:")
#         string_for_feature = string_for_feature + f"{tabs(2)}Given visited page {page_link}\n"
#         print("Option second")
#         break
# print("\n--OPTIONS FOR WHEN--")
# while True:
#     option = input("Choose one from options for WHEN action:\n"
#                    "1. When Clicking on button\n"
#                    "2. When Hovering on div\n")
#     if int(option) == 1:
#         string_for_feature = string_for_feature + f"{tabs(2)}When we press the button with id=<id>\n"
#         break
#     elif int(option) == 2:
#         string_for_feature = string_for_feature + f"{tabs(2)}When we press button with text <text>\n"
#         break
#
# print("\n--OPTIONS FOR THEN--")
#
# while True:
#     option = input("Choose one from options for THEN action:\n"
#                    "1. Then <title> Should Be In Title")
#
#     if int(option) == 1:
#         string_for_feature = string_for_feature + f"{tabs(2)}Then <title> Page Should Be In Title\n"
#         break
#
# try:
#     with open(f'features/{name_of_file}.feature', 'w') as f:
#         f.write(string_for_feature)
# except FileNotFoundError:
#     print("The 'docs' directory does not exist. Try using command 'create-dirs' before that")
#
#print("dd")